{"version":3,"file":"cms.80cdd86d22f73d85ce45.hot-update.js","sources":["webpack:///./src/components/Blog/BlogRoll.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { kebabCase } from 'lodash'\r\nimport { Link, graphql, StaticQuery } from 'gatsby'\r\nimport {Card, Row, Col, Container } from 'react-bootstrap'\r\nimport PreviewCompatibleImage from '../PreviewCompatibleImage'\r\nimport { IoIosArrowRoundForward } from \"react-icons/io\";\r\nimport './BlogRoll.sass'\r\n\r\nclass BlogRoll extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const { edges: posts } = data.allMarkdownRemark\r\n\r\n    return (\r\n      <section className=\"blog-block front-blocks\" id=\"blog\">\r\n      <Container>\r\n        <div className=\"section-title text-center\">\r\n           <span className=\"badge badge-primary\">BLOGS</span>\r\n           <h2>Blogs We Wrote For You</h2>\r\n           <span className=\"section-title-line\"></span>\r\n        </div>\r\n        <Row>\r\n        {posts &&\r\n          posts.map(({ node: post }) => (\r\n            <Col xs={12} xs={4} key={post.id}>\r\n              <Card className={`card theme-card blog-card ${\r\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\r\n                }`}>\r\n\r\n                {post.frontmatter.featuredimage ? (\r\n                  <div className=\"featured-thumbnail\">\r\n                    <img alt={post.frontmatter.title} src={post.frontmatter.featuredimage.publicURL} />\r\n                  </div>\r\n                ) : null}\r\n                <Card.Body>\r\n                <span className=\"postdate\">{post.frontmatter.date}</span>\r\n                  <h6>\r\n                    <Link\r\n                      className=\"title has-text-primary is-size-4\"\r\n                      to={post.fields.slug}\r\n                    >\r\n                      {post.frontmatter.title}\r\n                    </Link></h6>\r\n                  <Card.Text>\r\n                     {post.excerpt}\r\n                  </Card.Text>\r\n                  <span className=\"readlink\">\r\n                    <Link to={post.fields.slug}>Read More </Link>\r\n                  </span>\r\n                  <div className=\"tags-block\">\r\n                      {post.frontmatter.tags.map(tag => (\r\n                        <span key={tag + `tag`} className=\"badge badge-primary\"><Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link></span>\r\n                      ))}\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <div className=\"allposteslink\">\r\n            <Link className=\"btn btn-primary btn-lg\" to=\"/blog\" > \r\n              All Posts <IoIosArrowRoundForward/>\r\n            </Link>\r\n          </div>\r\n        </Container>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nBlogRoll.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.array,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query BlogRollQuery {\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              excerpt(pruneLength: 150)\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                templateKey\r\n                date(formatString: \"MMMM DD, YYYY\")\r\n                featuredpost\r\n                tags\r\n                featuredimage {\r\n                  publicURL\r\n                } \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={(data, count) => <BlogRoll data={data} count={count} />}\r\n  />\r\n)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AA3BA;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;;;AA9DA;AACA;AA+DA;AACA;AACA;AACA;AADA;AADA;AADA;AACA;AAOA;AAAA;AAEA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;;;;;;;;;;AAxEA;;;;;;;;;;;;;;A","sourceRoot":""}