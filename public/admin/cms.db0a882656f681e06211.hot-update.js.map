{"version":3,"file":"cms.db0a882656f681e06211.hot-update.js","sources":["webpack:///./src/components/Blog/BlogRoll.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql, StaticQuery } from 'gatsby'\r\nimport {Card, Row, Col, Container } from 'react-bootstrap'\r\nimport PreviewCompatibleImage from '../PreviewCompatibleImage'\r\nimport './style.sass'\r\n\r\nclass BlogRoll extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const { edges: posts } = data.allMarkdownRemark\r\n\r\n    return (\r\n      <section className=\"blog-block front-blocks\" id=\"blog\">\r\n      <Container>\r\n        <div className=\"section-title text-center\">\r\n           <span className=\"badge badge-primary\">BLOGS</span>\r\n           <h2>Blogs We Wrote For You</h2>\r\n           <span className=\"section-title-line\"></span>\r\n        </div>\r\n        <Row>\r\n        {posts &&\r\n          posts.map(({ node: post }) => (\r\n            <Col xs={12} xs={4} key={post.id}>\r\n              <Card className={`card theme-card blog-card ${\r\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\r\n                }`}>\r\n                {post.frontmatter.featuredimage ? (\r\n                  <div className=\"featured-thumbnail\">\r\n                    <PreviewCompatibleImage\r\n                      imageInfo={{\r\n                        image: post.frontmatter.featuredimage,\r\n                        alt: `featured image thumbnail for post ${post.frontmatter.title}`,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                <Card.Body>\r\n                <span className=\"badge badge-primary\"></span>\r\n                  <h6><Link\r\n                      className=\"title has-text-primary is-size-4\"\r\n                      to={post.fields.slug}\r\n                    >\r\n                      {post.frontmatter.title}\r\n                    </Link></h6>\r\n                  <Card.Text>\r\n                   <span></span>\r\n                     {post.excerpt}\r\n                  </Card.Text>\r\n                  <div className=\"blog-author\">\r\n                    <p><strong>Admin</strong> On {post.frontmatter.date}</p>\r\n                 </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n        <div className=\"text-center\"><Link className=\"btn btn-light btn-lg\" to=\"/blog\" > All Posts</Link></div>\r\n        </Container>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nBlogRoll.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.array,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query BlogRollQuery {\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              excerpt(pruneLength: 200)\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                templateKey\r\n                date(formatString: \"MMMM DD, YYYY\")\r\n                featuredpost\r\n                tags\r\n                featuredimage {\r\n                  childImageSharp {\r\n                    fluid(maxWidth: 120, quality: 100) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={(data, count) => <BlogRoll data={data} count={count} />}\r\n  />\r\n)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;;;;;;;;AAzDA;AACA;AA0DA;AACA;AACA;AACA;AADA;AADA;AADA;AACA;AAOA;AAAA;AAEA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;;;;;;;;;;AAnEA;;;;;;;;;;;;;;A","sourceRoot":""}